{"name":"Crafted-css","tagline":"Crafted CSS","body":"Crafted CSS\r\n===========\r\n\r\nThis is a personal compilation of CSS practices I follow.\r\n\r\nInspiration was drawn from Nicholas Gallagher's Idomatic CSS, Jonathan Snook's SMACSS, Harry Robert's HTML/CSS Coding Style, Nicole Sullivan's OOCSS, Yandex's BEM, Github's CSS Style Guide, Google's HTML/CSS Style Guide and my own experience with CSS over the years.\r\n\r\n> All code in any code-base should look like a single person typed it, no matter how many people contributed.\r\n> – _Nicholas Gallagher_\r\n\r\n\r\n\r\nContents\r\n--------\r\n\r\n- [General](#general)\r\n- [Formatting](#formatting)\r\n- [Whitespace](#whitespace)\r\n- [Numbers](#numbers)\r\n- [URLs](#urls)\r\n- [Colors](#colors)\r\n- [Vendor prefixes](#vendor-prefixes)\r\n- [Font size / line height](#font-size--line-height)\r\n- [Comments](#comments)\r\n- [Order](#order)\r\n- [Exceptions](#exceptions)\r\n- [Responsive Design](#responsive-design)\r\n- [OOCSS and BEM](#oocss-and-bem)\r\n- [JavaScript](#javascript)\r\n- [Preprocessors](#preprocessors)\r\n\r\n\r\n\r\nGeneral\r\n-------\r\n\r\n- Don't use IDs in CSS if at all possible. Stick to classes.\r\n- Do not be overly specific with your selectors. (e.g. `.my-list > li` rather than `body .content div.wrapper .my-list li`)\r\n- Instead of targetting an element based on it's parents like this: `body .header .box a.btn`, `.btn` is much better.\r\n- Avoid over-qualified selectors when possible. (e.g. Use `.btn` instead of `a.btn`)\r\n- Make your code as future-proof and easily editable for the next developer that will be working on it.\r\n- A note on shorthand, be explicit. If an element only needs `padding-bottom: 0;`, do not use the shorthand property `padding: 0`. It may come back to bite you later on when you need to overwrite CSS that shouldn't have been there in the first place.\r\n- When debugging your CSS, remove code rather than add more.\r\n\r\n\r\n\r\nFormatting\r\n----------\r\n\r\n- Write one declaration per line.\r\n- Always end declarations with a semicolon.\r\n- Make class/ID names human readable, but as short as possible. (e.g. `.nav` and `.btn` are fine, but use `.gallery` instead of `.glry`)\r\n- Use lowercase with dashes, not underscores or camelcase for class/ID names. (e.g. `.btn-large`, not `.btn_large` or `.btnLarge`)\r\n- Use double quotes. (`font-family: \"Lucida Sans\", sans-serif`)\r\n- Your closing brace should line up vertically with the first character in the ruleset.\r\n\r\n\r\n\r\nWhitespace\r\n----------\r\n\r\n- Properties should be indented four spaces.\r\n- Use soft tabs that span four spaces.\r\n- When indenting, do not mix tabs and spaces. Only use spaces. (I turn on Show Invisibles in my editor to check this.)\r\n- Always put a space between a selector and its opening curly brace.\r\n- Put a space after the colon between your property and value.\r\n- Never leave trailing white space. (I use a plugin that deletes trailing white space on each save.)\r\n- Use spaces between subvalues in values like hsla/rgba color values to improve readability. (e.g. `hsl(4, 100%, 43%)`)\r\n\r\nExample showing the proper use of whitespace:\r\n\r\n```css\r\n.btn {\r\n    background-image: linear-gradient(to bottom, #0cf, rgba(255, 255, 255, 0.5));\r\n}\r\n```\r\n\r\n\r\nNumbers\r\n-----\r\n\r\n- Always use a leading zero before a decimal number. (e.g. `opacity: 0.8;`)\r\n- Don't attach a unit to a zero value if it's not needed. (e.g. Use `padding: 1em 0 0` instead of `padding: 1em 0em 0px`. However, it is neccesarry to leave `%` on some zero values like `color: hsla(130, 0%, 50%, 0.2);`.)\r\n\r\n\r\n\r\nURLs\r\n----\r\n\r\n- Don't use quotes around `url`s.\r\n- Use only protocol-relative `url`s by not including `http:` and `https:`.\r\n\r\nProtocol-relative url example:\r\n\r\n```css\r\n.example {\r\n    background-image: url(//chrisnager.com/images/image.png);\r\n}\r\n```\r\n\r\n\r\n\r\nColors\r\n------\r\n\r\n- Color names (`red`) and shorthand hexcodes (`#eee`) are preffered. Regular hexcodes, `hsla`, and `rgba` should be used for additional color control.\r\n- Only use lowercase when dealing with colors. (e.g. `cadetblue`, `#dabb1e`, `#b2b`)\r\n\r\n\r\n\r\nVendor prefixes\r\n---------------\r\n\r\n- Do not indent vendor prefixed declarations.\r\n- Order them from longest prefix name to shortest.\r\n- Always use the non-prefixed property last.\r\n\r\n```css\r\n.btn {\r\n    -webkit-transition: background-color 0.4s ease-in-out;\r\n    -moz-transition: background-color 0.4s ease-in-out;\r\n    -o-transition: background-color 0.4s ease-in-out;\r\n    transition: background-color 0.4s ease-in-out;\r\n}\r\n```\r\n\r\n\r\n\r\nFont-size / line-height\r\n-----------------------\r\n\r\n- You can set your base `font-size` in pixels but all additional `font-size`s should be set with `rem`s or `em`s.\r\n- Root ems make sense for setting your `font-size`s because they are proportionally based on the initial `font-size` of the root element.\r\n- Always set your `line-height` with a unitless number. (e.g. `line-height: 1.4;`)\r\n\r\n```css\r\nhtml {\r\n    font: 16px/1.6 sans-serif;\r\n}\r\n\r\nh1 {\r\n    font-size: 40px; /* Fallback */\r\n    font-size: 2.5rem; /* This makes your h1 40px/64px. */\r\n}\r\n```\r\n\r\n\r\n\r\nComments\r\n--------\r\n\r\n- Comment often for future developers (and for future you).\r\n- First level comments should always be followed by an empty line.\r\n- Except for the first one on the page, first level comments should be preceded by six empty lines.\r\n- Three empty lines before second and third level comments.\r\n- Use sentence case when writing comments.\r\n\r\nCommenting formats:\r\n\r\n```css\r\n/* ==========================================================================\r\n   Comment level 1\r\n   ========================================================================== */\r\n\r\n.selector {\r\n    property: value;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* ==========================================================================\r\n   Here's another level 1 comment\r\n   ========================================================================== */\r\n\r\n/* Have you seen level 2 comments?\r\n   -------------------------------------------------------------------------- */\r\n.selector {\r\n    property: value;\r\n}\r\n\r\n\r\n\r\n/* And...comment level 3\r\n   ------------------------------------------------------ */\r\n   \r\n.selector {\r\n    property: value;\r\n}\r\n.selector {\r\n    property: value;\r\n}\r\n\r\n\r\n\r\n/* But wait! There's more. Comment level 4 */\r\n.selector {\r\n    property: value;\r\n}\r\n\r\n.selector {\r\n    property: value;\r\n}\r\n\r\n\r\n\r\n/* Level 2 comment\r\n   -------------------------------------------------------------------------- */\r\n.selector {\r\n    property: value;\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n/* ==========================================================================\r\n   Another level 1 comment\r\n   ========================================================================== */\r\n\r\n.selector {\r\n    property: value; /* A wild inline comment appeared! */\r\n}\r\n```\r\n\r\n\r\n\r\nOrder\r\n-----\r\n\r\nYou should follow this five-group model for crafting your CSS.\r\n\r\n1. Base - includes your elements without classes\r\n`html {}`,\r\n`a {}`,\r\n`a:hover {}`\r\n\r\n2. Layout - includes elements that make up the structure of the page\r\n`.l-module {}`,\r\n`.l-content {}`\r\n\r\n3. Module - includes typical elements that contain the content\r\n`.nav {}`\r\n    \r\n4. State - define your JS state classes here\r\n`.is-active {}`\r\n\r\n5. Theme - includes variations of module elements\r\n`.btn--dark {}`\r\n\r\nGeneral declaration order:\r\n\r\n```css\r\n.btn {\r\n    /* Box model */\r\n    content: \" »\";\r\n    box-sizing: border-box;\r\n    \r\n    width: auto;\r\n    min-width: 0;\r\n    max-width: none;\r\n    height: auto;\r\n    min-height: 0;\r\n    max-height: none;\r\n\r\n    margin: 0 auto;\r\n    margin-top: 0;\r\n    margin-right: auto;\r\n    margin-bottom: 0;\r\n    margin-left: auto;\r\n    border: 0;\r\n    border-top: 0;\r\n    border-top-width: 0;\r\n    border-right: 0;\r\n    border-right-width: 0;\r\n    border-bottom: 0;\r\n    border-bottom-width: 0;\r\n    border-left: 0;\r\n    border-left-width: 0;\r\n    border-radius: 0.15em;\r\n    padding: 0.5em 1em 0.55em;\r\n    padding-top: 0.5em;\r\n    padding-right: 1em;\r\n    padding-bottom: 0.55em;\r\n    padding-left: 1em;\r\n\r\n    /* List your positioning properties in TRBL (top, right, bottom, left) order. */\r\n    position: relative;\r\n    top: 0;\r\n    right: auto;\r\n    bottom: auto;\r\n    left: 0;\r\n\r\n    /* Display properties */\r\n    display: inline-block;\r\n    float: none;\r\n    clear: none;\r\n    z-index: 1;\r\n\r\n    list-style: katakana inside;\r\n    list-style-type: katakana;\r\n    list-style-image: url(list-disc.png);\r\n    list-style-position: inside;\r\n\r\n    opacity: 0.9;\r\n    cursor: pointer;\r\n\r\n    /* Tables */\r\n    table-layout: auto;\r\n    border-collapse: collapse;\r\n    border-spacing: 0.5em;\r\n    caption-side: top;\r\n    empty-cells: show;\r\n    speak-header: always;\r\n\r\n    /* Typographic styles */\r\n    font: 1.5rem sans-serif;\r\n    font-family: sans-serif;\r\n    font-variant: small-caps;\r\n    font-size: 1.5rem;\r\n    font-size-adjust: none;\r\n    font-weight: bold;\r\n    font-style: italic;\r\n    font-stretch: normal;\r\n\r\n    line-height: 1.5;\r\n    letter-spacing: -0.1em;\r\n\r\n    white-space: nowrap;\r\n    word-spacing: normal;\r\n\r\n    text-indent: 1em;\r\n    text-align: center;\r\n    text-transform: uppercase;\r\n    text-decoration: underline;\r\n    text-shadow: 0.1em -0.1em rgba(0, 0, 0, 0.8);\r\n\r\n    /* Colors and backgrounds */\r\n    color: white;\r\n\r\n    background: none;\r\n    background-color: red;\r\n    background-image: url(btn-bg.png);\r\n    background-position: right center;\r\n    background-repeat: no-repeat;\r\n    background-size: contain;\r\n    \r\n    /* Other presentational properties */\r\n    box-shadow: 0 0.1em 0.5em black;\r\n    transform: rotate(3deg);\r\n    transition: color 1s ease-out;\r\n    animation: flip 3s all;\r\n}\r\n```\r\n\r\n\r\n\r\nExceptions\r\n----------\r\n\r\n- Note the spacing inside the curly brackets.\r\n\r\nTake for example a large sprited image of national flags:\r\n\r\n```css\r\n.icon--flag {\r\n    width: 15px;\r\n    height: 10px;\r\n    border: 1px solid gold;\r\n    display: inline-block;\r\n    background-image: url(//path.to/sprite.png);\r\n}\r\n\r\n.icon--flag-1 { background-position: 0 -10px; }\r\n.icon--flag-2 { background-position: 0 -20px; }\r\n.icon--flag-3 { background-position: 0 -30px; }\r\n.icon--flag-4 { background-position: 0 -40px; }\r\n.icon--flag-5 { background-position: 0 -50px; }\r\n.icon--flag-6 { background-position: 0 -60px; }\r\n```\r\n\r\n\r\n\r\nResponsive Design\r\n-----------------\r\n\r\n- Write your media queries right along with your code and not all at the end of your CSS document.\r\n- Build in a flexible way where you do not need to set widths.\r\n- Craft your layouts with `rem`s, `em`s, and percentage-based units for fluidity.\r\n\r\n\r\n\r\nOOCSS and BEM\r\n-------------\r\n\r\n- OOCSS is all about finding design patterns that can be abstrated into reusable components.\r\n\r\nOOCSS example:\r\n\r\n```css\r\n.btn {}\r\n.btn--primary {}\r\n.btn--secondary {}\r\n```\r\n\r\n\r\n- BEM is the only time underscores are cool to use. BEM takes OOCSS to another level that establishes logical class names and keeps specificity to a bare minimum.\r\n\r\nHow BEM should be written:\r\n\r\n```css\r\n.block__element--modifier {}\r\n\r\nBlock\r\n.menu {}\r\n\r\nBlock + Modifier\r\n.menu--vertical {}\r\n\r\nBlock + Element\r\n.menu__menu-items {}\r\n\r\nBlock + Element + Modifier\r\n.menu__menu-items--rev {}\r\n```\r\n\r\n\r\n\r\nReal world example of OOCSS in action using a BEM-style class structure:\r\n\r\n```html\r\n<a href=\"/\" class=\"btn  btn--large  btn--positive\">Submit</a>\r\n```\r\n\r\n```css\r\n.btn {\r\n    border-radius: 0.1em;\r\n    padding: 0 0.75em;\r\n    display: inline-block;\r\n    line-height: 1.75em;\r\n    white-space: nowrap;\r\n    color: white;\r\n    background-color: gray;\r\n}\r\n\r\n\r\n\r\n.btn--small {\r\n    padding-right: 0.5em;\r\n    padding-left: 0.5em;\r\n    line-height: 1.5em;\r\n}\r\n\r\n.btn--large {\r\n    padding-right: 1em;\r\n    padding-left: 1em;\r\n    line-height: 2em;\r\n}\r\n\r\n\r\n\r\n.btn--positive {\r\n    background-color: limegreen;\r\n}\r\n\r\n.btn--negative {\r\n    background-color: orangered;\r\n}\r\n```\r\n\r\n\r\nJavaScript\r\n----------\r\n\r\n- Classes added by JS should be prefixed with \"is\" to denote the JS state that was added to the element. (e.g. `.is-active`)\r\n\r\n\r\n\r\nPreprocessors\r\n-------------\r\n\r\nI encourage splitting your SCSS/Less/Stylus files into a maintainable folder structure with chunks of related styles.\r\n\r\nLike this:\r\n\r\n`project-name.scss`\r\n`vars.scss`\r\n\r\nMore on this to come...","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}